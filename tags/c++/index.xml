<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on 北极狼徒</title>
    <link>/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on 北极狼徒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Feb 2019 20:07:56 +0800</lastBuildDate>
    
	<atom:link href="/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于对象那些事儿 ~~ 继承</title>
      <link>/blog/about_cpp_inherits/</link>
      <pubDate>Fri, 22 Feb 2019 20:07:56 +0800</pubDate>
      
      <guid>/blog/about_cpp_inherits/</guid>
      <description>关于继承 随着软件功能的日益完善，随之而来的就是软件的也越来越大，变得难以维护。传统的面向 过程的编程范式难以满足日益丰富的用户需求，因此一种需要一种新的编程范式来应对这种 复杂的需求。面向对象在这个时候出现，很好的解决了这些难题。它是一种软件开发方法， 利用应对世界关系的分析方法来分析复杂软件体系关系，实践证明这是可行的。
何为对象 世界的所有事物都可可以抽象为一个对象，一个对象拥有基本的属性以及作用在这些属性上 的功能。举个简单的例子：女朋友为一个对象，她有基本属性（身高、体重等），以及功能 （吃饭、说话等）。在面向对象的软件开发方法中，有三大特性：继承、封装及多态。今天 的主角是继承。
何为继承 每个对象的可以抽象为不同的级别，我们将有某些共同属性或功能抽象成一个基类对象，然 后让派生类来继续延用（继承）公用的属性或功能。同样举个简单例子：父亲是一个基类或 父类，小孩就是派生类或子类，小孩会继承父亲遗传的某些性状（如血型）。
继承是实现代码重用的重要手段，直接使用基类对象的属性和方法，呈现面向对象程序设计 的层次结构，体现由简单到复杂、一般到特殊的认知过程。继承的方式有三种：public继承、 protect继承、private继承。编译器通过三种方式对应的限定符进行区分。
public 继承 公有继承是比较常见的继承方式，通过 public 关键字来表明。
public 继承权限  父类的 public 成员继承为子类的 public 成员，子类可以访问。 父类的 protected 成员继承为子类的 protected 成员，子类成员函数可以访问。 父类的 private 成员仍为 父类 的 private 成员，子类不可以访问。  实例 #include &amp;lt;iostream&amp;gt; class Base { public: int int_pub = 0; protected: int int_pro = 0; private: int int_pri = 0; }; class Derive : public Base { public: void print() { std::cout &amp;lt;&amp;lt; &amp;quot;print:&amp;quot; &amp;lt;&amp;lt; int_pub &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;quot;print:&amp;quot; &amp;lt;&amp;lt; int_pro &amp;lt;&amp;lt; std::endl; // std::cout &amp;lt;&amp;lt; &amp;quot;print:&amp;quot; &amp;lt;&amp;lt; int_pri &amp;lt;&amp;lt; std::endl; } }; int main() { Derive d; std::cout &amp;lt;&amp;lt; &amp;quot;main:&amp;quot; &amp;lt;&amp;lt; d.</description>
    </item>
    
    <item>
      <title>动手写编辑器（四） ~ 文本编辑器</title>
      <link>/blog/write_textor_4/</link>
      <pubDate>Sun, 17 Feb 2019 16:51:33 +0800</pubDate>
      
      <guid>/blog/write_textor_4/</guid>
      <description>Table of Contens  文本编辑器 插入字符  重新映射方向键 按键处理 插入字符  删除字符  删除字符  添加行  换行  修改提示 保存文件 退出提示 另存为 效果 总结 参考  文本编辑器 在之前的三篇博客中，编辑器实现了文件的查看功能。这篇博客的工作主要是在前面的基础上修改 和添加一些内容，使得程序可以真正的实现编辑的功能。
插入字符 首先，要实现编辑功能，从小功能出发。我们使用编辑器的时候都是进行交互的操作，将键 盘的字符一个个的输入到编辑器中。因此需要实现从键盘读入字符然后正确的显示到编辑区 的对应位置。这意味着我们必须处理每一个可打印字符。在之前实现的功能中，我们使用 h, j, k, l 作为方向键来定位光标的位置，但是它们是可打印字符。所以在这里必须重新 映射方向键的返回值。
重新映射方向键 键盘上的每一个键都有一个 ASCII 码，不能将方向键映射到该范围。我们知道 ASCII 的范 围是 0~127。因此只需要将方向键映射到 128, 127, 129, 130 即可。 之前定义保存 ASCII 码的 key_ 为 char 类型，最大值为 127。为保险起见，修改为 usigned int 。修改代码如下：
enum key { ARROW_UP=128, ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT }; struct textor{ .</description>
    </item>
    
    <item>
      <title>动手写编辑器 (三) ~ 文件查看器</title>
      <link>/blog/write_textor_3/</link>
      <pubDate>Sat, 02 Feb 2019 13:27:35 +0800</pubDate>
      
      <guid>/blog/write_textor_3/</guid>
      <description>Table of Contens  状态栏  腾出空间 写入 buffer  消息框  腾出空间 滞留时间 写入消息 写入 buffer  滚动  垂直滚动 水平滚动 修改边界检查 写入 buffer  总结 参考  状态栏 熟悉 vim 的朋友都知道, vim 有一个状态栏，位于下边。状态栏的功能主要时显示一些基 本的信息，如文件名、光标位置等。
腾出空间 在之前的操作中，我们把整个窗口都用来显示文件内容了。所以我们必须将 rows_ 减去 一行用来显示状态信息。
inline int editor::get_window_size__() { ... rows_ = ws.ws_row - 1; /* 腾出状态栏 */ ... }  写入 buffer 现在将我们要显示的信息写入 buffer 的最后一行，也就是状态栏。为了区分状态栏和文本 区的不同，因此将颜色反转。
void editor::status_bar__() { append_buf__(&amp;quot;\x1b[7m&amp;quot;); /* 颜色反转 */ std::string stats((filename_.</description>
    </item>
    
    <item>
      <title>动手写编辑器（二） ~ 输入和输出</title>
      <link>/blog/write_textor_2/</link>
      <pubDate>Wed, 30 Jan 2019 11:06:21 +0800</pubDate>
      
      <guid>/blog/write_textor_2/</guid>
      <description>Table of Contens  窗口  Buffer 窗口 size 波浪线 欢迎界面  输入  Ctrl+q 退出 移动光标 文本内容  输出  显示 buffer 刷新屏幕  总结 参考  窗口 说到终端编辑器， vim 应该是用的最多的吧。在所有有关 Linux 基础的书本都会介绍 vi/vim 编辑器。因此在这里我将模仿 vim 编辑界面。话不多说，先看一下 vim 的启动界 面吧。
  左边的波浪号表示没有内容的行，中间显示打开编辑器时的欢迎界面以及基本命令信息。现 在就模仿 vim 的界面，实现一个简单的编辑器。下面我们来将这个界面画出来。
Buffer Buffer 是编辑器的主体部分，所有的信息都只能通过 buffer 显示。 buffer 里面是一串 很长的字符串，其中有些是转义序列表示终端的一些命令，在后续需要用到的时候再讲解。 说起字符串处理，应该是最常见的操作了，用 C 写的话可能需要自己管理字符串，比如申 请内存，释放内存等，不需要多线程，因此不需要考虑线程安全。我们直接使用 C++ 的 string 数据类型即可。
struct editor{ ... /* buffer */ std::string abuf_; .</description>
    </item>
    
    <item>
      <title>动手写编辑器(一) ~ 文本模式</title>
      <link>/blog/write_textor_1/</link>
      <pubDate>Sun, 20 Jan 2019 18:31:32 +0800</pubDate>
      
      <guid>/blog/write_textor_1/</guid>
      <description>Table of Contens  写作动机 规范模式 文本模式 设置属性  本地模式标志 ~~ c_lflag 输入模式标志 ~~ c_iflag 输出模式标志 ~~ c_oflag 杂项标志  开启和关闭文本模式 总结 参考  写作动机 因为是该项目的第一篇文章，在这里简单介绍实现该项目的动机。作为程序员，动手能力是 第一位的，不管看了多少经典书籍、亦或浏览过多少源码。如果没有自己动手去实现，这些 东西都不是自己的。本人可以说是一个编辑器爱好者吧，前前后后折腾过 N 多编辑器： 如编辑器之神 Vim, 神的编辑器 Emacs, 性感无比 Sublime text 以及宇宙最强 VSCode. 最终本人留下了 emacs 和 VSCode , 前者用于编程和写作，后者用于调试程序。 用了这么多的编辑器，是时候自己实现一个了。当然并不打算参与竞争，单纯为了学习。再 说了，目前我的 emacs+doom 已经能处理各种写作任务，而且我很享受在上面码字，就想 弹钢琴一样，无须鼠标干扰，安心写作。Ok~ 让我们开始一段奇妙的旅行吧～～～
规范模式 我们平常使用的交互式命令终端就是所谓的 canonical mode。简单来说就是，它每次接收一行文本， 允许通过退格键进行删除输入的内容，以 enter 作为发送触发键发送给程序，然后程序 对其进行响应。这种模式大多用于交互命令处理中。但是用在文本编辑器(如 nano)中 显然是不合适，因为它要处理的是每一个按键(包括 enter)。
文本模式 文本模式(raw mode)可以不处理 enter 触发的发送功能，而是把其作为键值进行处理。这个才 接近文本编辑器的要求。但是呢，终端默认都是规范模式，而且这两个模式之间的差别不仅 仅是这一个，而且要完全切换会涉及很多的标志位的设置。下面我们就一步步来让终端来实 现期望的文本模式。</description>
    </item>
    
    <item>
      <title>手把手实现一个 Linux shell</title>
      <link>/blog/writh_shell_with_cpp/</link>
      <pubDate>Sat, 19 Jan 2019 20:17:47 +0800</pubDate>
      
      <guid>/blog/writh_shell_with_cpp/</guid>
      <description>Table of Contens  Linux shell 基本知识 shell 工作流程 shell 实现  可执行程序该有的样子 一探循环体究竟 解剖循环体  总结 参考  Linux shell 基本知识 目前市场上主要有三大主流操作系统，除了 windows 系列几乎不需要在终端工作，其它两 大操作系统大部份应该是和终端打交道。当然这和不同系统的定位不一样有很大的关系， W 系主要面向娱乐办公，Linux 系主要是用服务器系统，所以对于程序员来说，或多或少得面 对它。Mac 虽然面向个人用户，但是结合了前两者的优势，娱乐办公和开 发都可以完美应对。在使用 *nix(linux &amp;amp; Mac) 过程中，我们几乎每天都会对着终端一行 行的执行代码，解释我们的名令的程序就是我们所谓的 shell, 也是本文的所讲的对象。 shell 自从诞生以来，也出现各种版本，虽然实现不同，功能都是一样的。本文写个 shell 只是为了学习，没有其它目的。据本人所知，目前流行的 shell 有： bash , zsh , fish , xosh 等，这几种 shell 本人都用过，简单讲奖各自的特点吧， bash 不用说了吧，几乎 所有发行版的默认 shell。 zsh 集装逼与高效于一身的 shell。强烈建议于 oh-my-zsh 一 起使用，省去配置的时间。 fish 小众软件，智能补全，拥有类似 apt 一样的插件管理工 具，但是由于 shell 语法和 bash 不兼容，建议个人使用，不要用于工作中。 xosh 是用 python 实现的，所以终端直接执行 python 语句就可以执行，同时可以执行系统命令。 pythoner 可以尝试一波，随时随地测试 python 语句。</description>
    </item>
    
  </channel>
</rss>