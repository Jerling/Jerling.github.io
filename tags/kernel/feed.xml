<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on 北极狼徒</title>
    <link>/tags/kernel/</link>
    <description>Recent content in kernel on 北极狼徒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 20 Jun 2019 20:52:58 +0800</lastBuildDate>
    
	<atom:link href="/tags/kernel/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 内核设计与实现 — 时间管理</title>
      <link>/post/linux_kernel_design_and_impl_ch11/</link>
      <pubDate>Thu, 20 Jun 2019 20:52:58 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl_ch11/</guid>
      <description>内核中有很多基于时间驱动的函数，如调度程序中运行队列进行平衡调整或对屏幕进行刷新等。时间管理中需注意相对时间和绝对时间的差别以及周期性事件和</description>
    </item>
    
    <item>
      <title>Linux 内核设计与实现 — 内核同步</title>
      <link>/post/linux_design_and_impl_ch09/</link>
      <pubDate>Wed, 12 Jun 2019 20:40:09 +0800</pubDate>
      
      <guid>/post/linux_design_and_impl_ch09/</guid>
      <description>在进行多线程编程时，我们要特意留意共享数据的保护，防止并发访问时多个线程同时操作 导致的结果不一致性。 Linux 2.0 开始内核开始支持 SMP. 所以内核可以在同一</description>
    </item>
    
    <item>
      <title>Linux 内核设计与实现 — 下半部</title>
      <link>/post/linux_kernel_design_and_impl_ch08/</link>
      <pubDate>Sun, 09 Jun 2019 15:11:35 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl_ch08/</guid>
      <description>内核为处理中断提供了中断处理程序机制，这是内核必不可少的一部分。但仍然存在一些局 限： 中断程序异步执行，可能打断其它重要代码的执行；因此中断处</description>
    </item>
    
    <item>
      <title>Linux 内核设计与实现 — 系统调用</title>
      <link>/post/linux_kernel_design_and_impl/</link>
      <pubDate>Sat, 01 Jun 2019 22:21:06 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl/</guid>
      <description>三个作用 为用户空间提供硬件抽象接口 保证系统稳定和安全 使每个用户程序运行在虚拟系统中 系统调用 定义一个系统调用(以 getpid() 为例)： SYSCALL_DEFINE0(getpid) { return task_tgid_vnr(current); // return current-&amp;gt;tgid } SYSCALL_DEFINE0 是</description>
    </item>
    
    <item>
      <title>Linux 内核设计与实现 — 进程调度</title>
      <link>/post/linux_kernel_design_and_impl_ch04/</link>
      <pubDate>Sat, 25 May 2019 23:05:31 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl_ch04/</guid>
      <description>进程调度 进程是程序的运行态的表现形式 进程调用是确保程序有效工作的内核子系统 多任务 并发交互的执行多个进程的操作系统 抢占式 : 由调度程序决定什么时</description>
    </item>
    
  </channel>
</rss>