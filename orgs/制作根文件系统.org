#+TITLE: 制作根文件系统
#+DATE: 2020-09-29T21:53:41+08:00
#+PUBLISHDATE: 2020-09-29T21:53:41+08:00
#+DRAFT: nil
#+TAGS: nil, nil
#+DESCRIPTION: Short description

#+HUGO_CUSTOM_FRONT_MATTER: :author_homepage "https://github.com/Jerling"
#+HUGO_CUSTOM_FRONT_MATTER: :toc true
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./post
#+HUGO_TYPE: post
#+HUGO_WEIGHT: auto
#+AUTHOR: Jerling
#+HUGO_CATEGORIES: 操作系统
#+HUGO_TAGS: linux rootfs busybox

** 准备工作
Bbusybox 提供了一系列可以直接运行的小程序集合，因此将 busybox 编译后的产物作为 rootfs
的工具再好不过了。这里需要说明的是，交叉编译器要和处理器架构一致。而且要以静态链接的方式进行
链接，不然要将相应的动态库拷进系统中， 具体位置在 setting 菜单里。
编译过程：
#+BEGIN_SRC sh
wget https://busybox.net/downloads/busybox-1.32.0.tar.bz2
tar xvf busybox-1.32.0.tar.bz2
cd busybox-1.32.0
make menuconfig
#+END_SRC

[[file:../static/images/截图录屏_选择区域_20200929221635.png]]


编译完需要安装：
#+BEGIN_SRC sh
make install
#+END_SRC

在 busybox 目录下会生成一个 _install 目录，主要包含一些可执行文件。
** rootfs
创建镜像，并格式化为 ext4 文件系统，然后挂载：
#+BEGIN_SRC sh
dd if=/dev/zero of=rootfs.img bs=1M count=1024
mkfs.ext4 -m 0 -O none -F rootfs.img
sudo mount -o loop rootfs.img rootfs
#+END_SRC

将上一步生成的 _install 目录下的文件拷贝到 rootfs.
#+BEGIN_SRC sh
mkdir rootfs
sudo cp Busybox目录/_install/* rootfs/ -raf
#+END_SRC

在 rootfs 中新建 linux 的根目录树：
#+BEGIN_SRC sh
mkdir  dev  etc  lib  var  proc  tmp  home  root  mnt  sys
#+END_SRC

拷贝 busybox 的配置目录：
#+BEGIN_SRC sh
cp busybox目录/examples/bootfloppy/etc/*  rootfs/etc -r
#+END_SRC

修改 profile 文件内容：
#+BEGIN_SRC sh
# /etc/profile: system-wide .profile file for the Bourne shells

PATH=/bin:/sbin:/usr/bin:/usr/sbin #可执行程序 环境变量
export LD_LIBRARY_PATH=/lib:/usr/lib #动态链接库 环境变量
/bin/hostname mypc
USER="`id -un`"
LOGNAME=$USER
HOSTNAME='/bin/hostname'
PS1='[\u@\h \W]# ' #显示主机名、当前路径等信息：
#+END_SRC

修改 initab 文件内容：
#+BEGIN_SRC sh
::sysinit:/etc/init.d/rcS
console::askfirst:-/bin/sh
::ctrlaltdel:/bin/umount -a -r
#+END_SRC

修改 fstab 内容如下 :
#+BEGIN_SRC sh
proc            /proc           proc    defaults 0 0
none            /var            ramfs   defaults 0 0
none            /sys            sysfs   default  0 0
none            /dev/pts        devpts  default  0 0
tmpfs           /dev/shm        tmpfs   defaults 0 0
#+END_SRC

/dev目录中添加必要设备：
#+BEGIN_SRC sh
sudo mknod dev/console c 5 1
sudo mknod dev/null c 1 3
#+END_SRC
** 卸载镜像
#+BEGIN_SRC sh
sudo umount rootfs
#+END_SRC

** 用 lkvmtools 启动虚拟机：
#+BEGIN_SRC sh
./lkvm run --kernel ../linux-5.8.9/arch/x86/boot/bzImage --disk ../rootfs.img
#+END_SRC

最终结果如下：
[[file:../static/images/截图录屏_选择区域_20200929224431.png]]
** 结束语
从上面的结果来看，比较符合预期。但是还不太好用。后面将开始探索如何使用 lkvmtools hack Linux 内核。
