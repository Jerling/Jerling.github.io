<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on 北极狼徒</title>
    <link>/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on 北极狼徒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 09 Jun 2019 15:11:35 +0800</lastBuildDate>
    
	<atom:link href="/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 内核设计与实现 — 下半部</title>
      <link>/post/linux_kernel_design_and_impl_ch08/</link>
      <pubDate>Sun, 09 Jun 2019 15:11:35 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl_ch08/</guid>
      <description>内核为处理中断提供了中断处理程序机制，这是内核必不可少的一部分。但仍然存在一些局 限： 中断程序异步执行，可能打断其它重要代码的执行；因此中断处</description>
    </item>
    
    <item>
      <title>Linux 内核设计与实现 — 内核数据结构</title>
      <link>/post/linux_kernel_design_and_impl_ch06/</link>
      <pubDate>Fri, 07 Jun 2019 22:09:18 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl_ch06/</guid>
      <description>本章节的内容是一些数据结构，没甚么可说的。随便记记笔记吧。内容包括链表、队列、映 射、二叉树。 链表 这是 linux 中最简单的数据结构，是一种存放客可变数</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 对象模型 — Function 语意学</title>
      <link>/post/cpp_object_models_ch04/</link>
      <pubDate>Mon, 03 Jun 2019 22:26:04 +0800</pubDate>
      
      <guid>/post/cpp_object_models_ch04/</guid>
      <description>调用方式 普通函数 虚函数 静态函数 非静态成员函数 C++ 设计准则之一：非静态成员函数至少和非成员函数效率一样。 成员函数内化为非成员函数的过程： 改写函数</description>
    </item>
    
    <item>
      <title>Linux 内核设计与实现 — 系统调用</title>
      <link>/post/linux_kernel_design_and_impl/</link>
      <pubDate>Sat, 01 Jun 2019 22:21:06 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl/</guid>
      <description>三个作用 为用户空间提供硬件抽象接口 保证系统稳定和安全 使每个用户程序运行在虚拟系统中 系统调用 定义一个系统调用(以 getpid() 为例)： SYSCALL_DEFINE0(getpid) { return task_tgid_vnr(current); // return current-&amp;gt;tgid } SYSCALL_DEFINE0 是</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 对象模型 — Data 语义学</title>
      <link>/post/cpp_object_models_ch03/</link>
      <pubDate>Tue, 28 May 2019 23:18:19 +0800</pubDate>
      
      <guid>/post/cpp_object_models_ch03/</guid>
      <description>对象大小 语言本身所造成的额外负担，如虚基类 编译器对于特殊情况的优化处理，如某些编译器对空虚基类的特殊支持，一般放在头部 就省去 1 byte 大小的空间 字</description>
    </item>
    
    <item>
      <title>Linux 内核设计与实现 — 进程调度</title>
      <link>/post/linux_kernel_design_and_impl_ch04/</link>
      <pubDate>Sat, 25 May 2019 23:05:31 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl_ch04/</guid>
      <description>进程调度 进程是程序的运行态的表现形式 进程调用是确保程序有效工作的内核子系统 多任务 并发交互的执行多个进程的操作系统 抢占式 : 由调度程序决定什么时</description>
    </item>
    
    <item>
      <title>linux 设计与实现 — 进程管理</title>
      <link>/post/linux_kernel_design_and_impl_ch02/</link>
      <pubDate>Sun, 19 May 2019 21:02:15 +0800</pubDate>
      
      <guid>/post/linux_kernel_design_and_impl_ch02/</guid>
      <description>进程 进程：处于执行期的程序的实时结果 文件描述符 挂起的信号 内核内部数据 处理器状态 一个或多个内存映射地址 一个或多个执行线程 (执行)线程： 进程中的</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 对象模型 — 构造语义学</title>
      <link>/post/cpp_object_models_ch02/</link>
      <pubDate>Fri, 17 May 2019 21:57:43 +0800</pubDate>
      
      <guid>/post/cpp_object_models_ch02/</guid>
      <description>默认构造函数 在ARM(Annotated Reference Manual) 中：默认构造函数在 需要的 时候由编译器产生 产生出来。这里的需要为编译器需要，而不是程序需要，程序需</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 对象模型 — 关于对象</title>
      <link>/post/cpp_object_models_ch01/</link>
      <pubDate>Tue, 07 May 2019 23:36:30 +0800</pubDate>
      
      <guid>/post/cpp_object_models_ch01/</guid>
      <description>关于对象 面向过程 在 C 语言中, 我们通常将 *数据* 和 *处理数据的操作(函数)* 分开声明, 也就是说语言本身没有支持 *数据和函数* 之间的关联性. 这种</description>
    </item>
    
  </channel>
</rss>